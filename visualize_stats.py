#!/usr/bin/env python3
"""
Visualization tool for Specimux processing flow statistics.

This script creates interactive Sankey diagrams from the stats.json file 
generated by Specimux, showing the flow of sequences through primer detection,
outcome classification, and pool assignment.

Requires: pip install plotly

Usage: 
    python visualize_stats.py <stats.json> [output.html]
    python visualize_stats.py stats.json
    python visualize_stats.py stats.json flow_diagram.html
"""

import argparse
import json
import os
import sys
from pathlib import Path
from typing import Dict, Any, List, Tuple

try:
    import plotly.graph_objects as go
    from plotly.offline import plot
except ImportError:
    print("Error: plotly is required. Install with: pip install plotly")
    sys.exit(1)


def load_stats_data(json_file: str) -> Dict[str, Any]:
    """Load and validate the stats JSON file."""
    try:
        with open(json_file, 'r') as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"Error: File '{json_file}' not found.")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"Error: Invalid JSON in '{json_file}': {e}")
        sys.exit(1)
    
    # Validate required structure
    required_keys = ['metadata', 'nodes', 'links']
    for key in required_keys:
        if key not in data:
            print(f"Error: Missing required key '{key}' in JSON file")
            sys.exit(1)
    
    if 'title' not in data['metadata'] or 'total_sequences' not in data['metadata']:
        print("Error: Missing required metadata fields (title, total_sequences)")
        sys.exit(1)
        
    return data


def create_node_colors(nodes: List[Dict[str, str]]) -> List[str]:
    """Generate colors for different node types in the flow diagram."""
    colors = []
    
    for node in nodes:
        node_id = node['id']
        if node_id == 'total':
            colors.append('#2E86AB')  # Blue for total
        elif node_id.startswith('p1_'):
            colors.append('#F18F01')  # Orange for first primers  
        elif node_id.startswith('p2_'):
            colors.append('#E1BC29')  # Yellow for primer pairs
        elif node_id.startswith('outcome_'):
            if 'matched' in node_id:
                colors.append('#4CAF50')  # Green for matched
            elif 'partial' in node_id:
                colors.append('#FF9800')  # Orange for partial
            elif 'ambiguous' in node_id:
                colors.append('#9C27B0')  # Purple for ambiguous
            else:
                colors.append('#757575')  # Gray for unknown
        elif node_id.startswith('pool_'):
            colors.append('#A23B72')  # Purple for pools
        else:
            colors.append('#CCCCCC')  # Default gray
            
    return colors


def create_flow_diagram(data: Dict[str, Any], output_file: str, width: int = 1200, height: int = 600) -> None:
    """Create a Sankey diagram from specimux flow statistics."""
    
    # Extract nodes and create index mapping
    nodes = data['nodes']
    node_ids = [node['id'] for node in nodes]
    node_names = [node['name'] for node in nodes]
    
    # Create index mapping
    id_to_index = {node_id: i for i, node_id in enumerate(node_ids)}
    
    # Extract links with indices
    links = data['links']
    try:
        source_indices = [id_to_index[link['source']] for link in links]
        target_indices = [id_to_index[link['target']] for link in links]
        values = [link['value'] for link in links]
    except KeyError as e:
        print(f"Error: Invalid node reference in links: {e}")
        sys.exit(1)
    
    # Generate colors
    node_colors = create_node_colors(nodes)
    
    # Create the Sankey diagram
    fig = go.Figure(data=[go.Sankey(
        node=dict(
            pad=15,
            thickness=20,
            line=dict(color="black", width=0.5),
            label=node_names,
            color=node_colors
        ),
        link=dict(
            source=source_indices,
            target=target_indices,
            value=values
        )
    )])
    
    # Set title and layout
    title = data['metadata']['title']
    total_seqs = data['metadata']['total_sequences']
    
    fig.update_layout(
        title_text=f"{title}<br>({total_seqs:,} sequences processed)",
        font_size=10,
        width=width,
        height=height
    )
    
    # Save the diagram
    plot(fig, filename=output_file, auto_open=False)
    print(f"Flow diagram saved to {output_file}")


def main():
    parser = argparse.ArgumentParser(
        description="Create interactive Sankey diagrams from Specimux flow statistics",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s stats.json
  %(prog)s stats.json custom_output.html
  %(prog)s stats.json --width 1600 --height 800
        """
    )
    
    parser.add_argument('stats_file', 
                       help='Path to the stats.json file generated by Specimux')
    parser.add_argument('output_file', nargs='?', 
                       help='Output HTML file (default: flow_diagram.html)')
    parser.add_argument('--width', type=int, default=1200,
                       help='Diagram width in pixels (default: 1200)')
    parser.add_argument('--height', type=int, default=600,
                       help='Diagram height in pixels (default: 600)')
    
    args = parser.parse_args()
    
    # Validate input file
    if not os.path.exists(args.stats_file):
        print(f"Error: Stats file '{args.stats_file}' does not exist")
        sys.exit(1)
    
    # Set default output file if not provided
    output_file = args.output_file or 'flow_diagram.html'
    
    # Validate output directory is writable
    output_dir = os.path.dirname(os.path.abspath(output_file))
    if not os.access(output_dir, os.W_OK):
        print(f"Error: Cannot write to output directory '{output_dir}'")
        sys.exit(1)
    
    # Load data and create diagram
    data = load_stats_data(args.stats_file)
    create_flow_diagram(data, output_file, args.width, args.height)


if __name__ == "__main__":
    main()